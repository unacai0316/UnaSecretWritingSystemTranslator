{"ast":null,"code":"import syllables from './syllables';\nconst normalize = text => {\n  text = text.normalize('NFD').replace(/\\u0304|\\u0301|\\u030c|\\u0300/g, '');\n  return text.normalize('NFC').replace(/(\\w|ü)[1-5]/gi, '$1').toLowerCase();\n};\nexport function split(text, everything = false, wrapInList = false) {\n  const list = Array();\n  let prevWordFound = false;\n  let wordEnd = text.length;\n  while (wordEnd > 0) {\n    let count = wordEnd;\n    let wordFound = false;\n    while (count > 0) {\n      const word = text.substring(wordEnd - count, wordEnd);\n      if (syllables.includes(normalize(word))) {\n        wordFound = true;\n        list.push(wrapInList ? [word] : word);\n        wordEnd -= count - 1;\n        break;\n      }\n      count--;\n    }\n    if (!wordFound && everything) {\n      const prevIndex = list.length - 1;\n      const prevEntry = list[prevIndex];\n      if (wordEnd === text.length || typeof prevEntry === 'object' || prevWordFound) {\n        list.push(text[wordEnd - 1]);\n      } else if (typeof prevEntry === 'string') {\n        list[prevIndex] = text[wordEnd - 1] + prevEntry;\n      }\n    }\n    wordEnd--;\n    prevWordFound = wordFound;\n  }\n  return list.reverse();\n}\nexport default split;","map":{"version":3,"names":["syllables","normalize","text","replace","toLowerCase","split","everything","wrapInList","list","Array","prevWordFound","wordEnd","length","count","wordFound","word","substring","includes","push","prevIndex","prevEntry","reverse"],"sources":["/Users/tsaiyunzhen/my-react-app/my-app/node_modules/pinyin-split/lib/esm/index.js"],"sourcesContent":["import syllables from './syllables';\nconst normalize = (text) => {\n    text = text.normalize('NFD').replace(/\\u0304|\\u0301|\\u030c|\\u0300/g, '');\n    return text.normalize('NFC').replace(/(\\w|ü)[1-5]/gi, '$1').toLowerCase();\n};\nexport function split(text, everything = false, wrapInList = false) {\n    const list = Array();\n    let prevWordFound = false;\n    let wordEnd = text.length;\n    while (wordEnd > 0) {\n        let count = wordEnd;\n        let wordFound = false;\n        while (count > 0) {\n            const word = text.substring(wordEnd - count, wordEnd);\n            if (syllables.includes(normalize(word))) {\n                wordFound = true;\n                list.push(wrapInList ? [word] : word);\n                wordEnd -= (count - 1);\n                break;\n            }\n            count--;\n        }\n        if (!wordFound && everything) {\n            const prevIndex = list.length - 1;\n            const prevEntry = list[prevIndex];\n            if (wordEnd === text.length || typeof prevEntry === 'object' || prevWordFound) {\n                list.push(text[wordEnd - 1]);\n            }\n            else if (typeof prevEntry === 'string') {\n                list[prevIndex] = text[wordEnd - 1] + prevEntry;\n            }\n        }\n        wordEnd--;\n        prevWordFound = wordFound;\n    }\n    return list.reverse();\n}\nexport default split;\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,aAAa;AACnC,MAAMC,SAAS,GAAIC,IAAI,IAAK;EACxBA,IAAI,GAAGA,IAAI,CAACD,SAAS,CAAC,KAAK,CAAC,CAACE,OAAO,CAAC,8BAA8B,EAAE,EAAE,CAAC;EACxE,OAAOD,IAAI,CAACD,SAAS,CAAC,KAAK,CAAC,CAACE,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC,CAACC,WAAW,CAAC,CAAC;AAC7E,CAAC;AACD,OAAO,SAASC,KAAKA,CAACH,IAAI,EAAEI,UAAU,GAAG,KAAK,EAAEC,UAAU,GAAG,KAAK,EAAE;EAChE,MAAMC,IAAI,GAAGC,KAAK,CAAC,CAAC;EACpB,IAAIC,aAAa,GAAG,KAAK;EACzB,IAAIC,OAAO,GAAGT,IAAI,CAACU,MAAM;EACzB,OAAOD,OAAO,GAAG,CAAC,EAAE;IAChB,IAAIE,KAAK,GAAGF,OAAO;IACnB,IAAIG,SAAS,GAAG,KAAK;IACrB,OAAOD,KAAK,GAAG,CAAC,EAAE;MACd,MAAME,IAAI,GAAGb,IAAI,CAACc,SAAS,CAACL,OAAO,GAAGE,KAAK,EAAEF,OAAO,CAAC;MACrD,IAAIX,SAAS,CAACiB,QAAQ,CAAChB,SAAS,CAACc,IAAI,CAAC,CAAC,EAAE;QACrCD,SAAS,GAAG,IAAI;QAChBN,IAAI,CAACU,IAAI,CAACX,UAAU,GAAG,CAACQ,IAAI,CAAC,GAAGA,IAAI,CAAC;QACrCJ,OAAO,IAAKE,KAAK,GAAG,CAAE;QACtB;MACJ;MACAA,KAAK,EAAE;IACX;IACA,IAAI,CAACC,SAAS,IAAIR,UAAU,EAAE;MAC1B,MAAMa,SAAS,GAAGX,IAAI,CAACI,MAAM,GAAG,CAAC;MACjC,MAAMQ,SAAS,GAAGZ,IAAI,CAACW,SAAS,CAAC;MACjC,IAAIR,OAAO,KAAKT,IAAI,CAACU,MAAM,IAAI,OAAOQ,SAAS,KAAK,QAAQ,IAAIV,aAAa,EAAE;QAC3EF,IAAI,CAACU,IAAI,CAAChB,IAAI,CAACS,OAAO,GAAG,CAAC,CAAC,CAAC;MAChC,CAAC,MACI,IAAI,OAAOS,SAAS,KAAK,QAAQ,EAAE;QACpCZ,IAAI,CAACW,SAAS,CAAC,GAAGjB,IAAI,CAACS,OAAO,GAAG,CAAC,CAAC,GAAGS,SAAS;MACnD;IACJ;IACAT,OAAO,EAAE;IACTD,aAAa,GAAGI,SAAS;EAC7B;EACA,OAAON,IAAI,CAACa,OAAO,CAAC,CAAC;AACzB;AACA,eAAehB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}