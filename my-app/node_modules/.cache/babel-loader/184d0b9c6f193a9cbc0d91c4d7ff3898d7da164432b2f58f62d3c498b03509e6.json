{"ast":null,"code":"var _jsxFileName = \"/Users/tsaiyunzhen/my-react-app/my-app/src/TranslationEncryption.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// 注音到鍵盤的映射（這裡只是一個示例，您需要完善這個映射）\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst zhuyin2keyboard = {\n  'ㄅ': '1',\n  'ㄆ': 'q',\n  'ㄇ': 'a',\n  'ㄈ': 'z',\n  'ㄉ': '2',\n  'ㄊ': 'w',\n  'ㄋ': 's',\n  'ㄌ': 'x',\n  'ㄧ': 'i',\n  'ㄨ': 'u',\n  'ㄩ': 'y',\n  'ˊ': '6',\n  'ˇ': '3',\n  'ˋ': '4',\n  '˙': '7'\n};\n\n// 模擬翻譯API（實際使用時需要替換為真實的API調用）\nconst translateAPI = async text => {\n  // 這裡應該是實際的API調用\n  return '豆子'; // 假設 'beans' 永遠翻譯成 '豆子'\n};\n\n// 模擬中文到注音的轉換（實際使用時需要一個完整的轉換庫）\nconst chinese2zhuyin = text => {\n  // 這裡應該是實際的轉換邏輯\n  return 'ㄉㄡˋㄗ˙'; // 假設 '豆子' 永遠轉換成 'ㄉㄡˋㄗ˙'\n};\nconst zhuyin2keyboard2 = zhuyin => {\n  return zhuyin.split('').map(char => zhuyin2keyboard[char] || char).join('');\n};\nconst TranslationEncryption = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [result, setResult] = useState('');\n  const handleTranslate = async () => {\n    try {\n      const chinese = await translateAPI(input);\n      const zhuyin = chinese2zhuyin(chinese);\n      const encrypted = zhuyin2keyboard2(zhuyin);\n      setResult(`中文：${chinese}\\n注音：${zhuyin}\\n加密：${encrypted}`);\n    } catch (error) {\n      setResult('轉換過程中出現錯誤');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 bg-gray-100 rounded-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"\\u7FFB\\u8B6F\\u52A0\\u5BC6\\u5668\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      className: \"w-full p-2 mb-4 border rounded\",\n      placeholder: \"\\u8F38\\u5165\\u82F1\\u6587\\u55AE\\u8A5E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTranslate,\n      className: \"bg-blue-500 text-white p-2 rounded hover:bg-blue-600\",\n      children: \"\\u7FFB\\u8B6F\\u4E26\\u52A0\\u5BC6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      className: \"mt-4 p-2 bg-white rounded\",\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(TranslationEncryption, \"Rn2yf1jfSoSMg1/LTdctDCg0n5U=\");\n_c = TranslationEncryption;\nexport default TranslationEncryption;\nvar _c;\n$RefreshReg$(_c, \"TranslationEncryption\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","zhuyin2keyboard","translateAPI","text","chinese2zhuyin","zhuyin2keyboard2","zhuyin","split","map","char","join","TranslationEncryption","_s","input","setInput","result","setResult","handleTranslate","chinese","encrypted","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/tsaiyunzhen/my-react-app/my-app/src/TranslationEncryption.js"],"sourcesContent":["import React, { useState } from 'react';\n\n// 注音到鍵盤的映射（這裡只是一個示例，您需要完善這個映射）\nconst zhuyin2keyboard = {\n  'ㄅ': '1', 'ㄆ': 'q', 'ㄇ': 'a', 'ㄈ': 'z',\n  'ㄉ': '2', 'ㄊ': 'w', 'ㄋ': 's', 'ㄌ': 'x',\n  'ㄧ': 'i', 'ㄨ': 'u', 'ㄩ': 'y',\n  'ˊ': '6', 'ˇ': '3', 'ˋ': '4', '˙': '7'\n};\n\n// 模擬翻譯API（實際使用時需要替換為真實的API調用）\nconst translateAPI = async (text) => {\n  // 這裡應該是實際的API調用\n  return '豆子'; // 假設 'beans' 永遠翻譯成 '豆子'\n};\n\n// 模擬中文到注音的轉換（實際使用時需要一個完整的轉換庫）\nconst chinese2zhuyin = (text) => {\n  // 這裡應該是實際的轉換邏輯\n  return 'ㄉㄡˋㄗ˙'; // 假設 '豆子' 永遠轉換成 'ㄉㄡˋㄗ˙'\n};\n\nconst zhuyin2keyboard2 = (zhuyin) => {\n  return zhuyin.split('').map(char => zhuyin2keyboard[char] || char).join('');\n};\n\nconst TranslationEncryption = () => {\n  const [input, setInput] = useState('');\n  const [result, setResult] = useState('');\n\n  const handleTranslate = async () => {\n    try {\n      const chinese = await translateAPI(input);\n      const zhuyin = chinese2zhuyin(chinese);\n      const encrypted = zhuyin2keyboard2(zhuyin);\n      setResult(`中文：${chinese}\\n注音：${zhuyin}\\n加密：${encrypted}`);\n    } catch (error) {\n      setResult('轉換過程中出現錯誤');\n    }\n  };\n\n  return (\n    <div className=\"p-4 bg-gray-100 rounded-lg\">\n      <h2 className=\"text-2xl font-bold mb-4\">翻譯加密器</h2>\n      <input\n        type=\"text\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        className=\"w-full p-2 mb-4 border rounded\"\n        placeholder=\"輸入英文單詞\"\n      />\n      <button\n        onClick={handleTranslate}\n        className=\"bg-blue-500 text-white p-2 rounded hover:bg-blue-600\"\n      >\n        翻譯並加密\n      </button>\n      <pre className=\"mt-4 p-2 bg-white rounded\">{result}</pre>\n    </div>\n  );\n};\n\nexport default TranslationEncryption;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}