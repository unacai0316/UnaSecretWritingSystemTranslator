{"ast":null,"code":"import { removeTone, getToneNumber, numberToMark } from 'pinyin-utils';\nimport pinyinSplit from 'pinyin-split';\nimport py2zy from './py2zy';\nexport const toneMarks = [\"\", \"ˊ\", \"ˇ\", \"`\", \"˙\"];\nexport const fromPinyinSyllable = pinyin => {\n  let zy = py2zy[removeTone(pinyin).toLowerCase()];\n  return zy + toneMarks[getToneNumber(pinyin) - 1];\n};\nexport const fromPinyin = (input, everything = false) => {\n  const translate = pinyin => {\n    return pinyinSplit(pinyin, everything).map(item => {\n      if (everything) {\n        if (typeof item === 'string') return item;else {\n          return fromPinyinSyllable(item[0]);\n        }\n      } else {\n        return fromPinyinSyllable(item);\n      }\n    });\n  };\n  if (typeof input === 'string') return translate(input);else return input.map(translate);\n};\nexport const splitZhuyin = (zhuyin, everything = false) => {\n  const list = [];\n  let index = 0;\n  while (index < zhuyin.length) {\n    let count = zhuyin.length - index;\n    let wordFound = false;\n    while (count > 1) {\n      let word = zhuyin.substr(index, count);\n      if (Object.values(py2zy).includes(word)) {\n        // word found\n        wordFound = true;\n        if (toneMarks.includes(zhuyin[index + count])) {\n          // tone found after word\n          word += zhuyin[index + count];\n          count++;\n        }\n        list.push(everything ? [word] : word);\n        index += count - 1;\n        break;\n      }\n      count--;\n    }\n    if (!wordFound && everything) {\n      if (index === 0 || typeof list[list.length - 1] === 'object') {\n        list.push(zhuyin[index]);\n      } else if (typeof list[list.length - 1] === 'string') {\n        list[list.length - 1] += zhuyin[index];\n      }\n    }\n    index++;\n  }\n  return list;\n};\nexport const toPinyinSyllable = zhuyin => {\n  let tone = toneMarks.indexOf(zhuyin[zhuyin.length - 1]) + 1;\n  if (tone > 0) {\n    zhuyin = zhuyin.substr(0, zhuyin.length - 1);\n  } else {\n    tone = 1;\n  }\n  let pinyinIndex = Object.values(py2zy).indexOf(zhuyin);\n  if (pinyinIndex > -1) {\n    return Object.keys(py2zy)[pinyinIndex] + tone;\n  } else {\n    return zhuyin;\n  }\n};\nexport const toPinyin = (zhuyin, opts = {}) => {\n  let list = splitZhuyin(zhuyin, opts.everything);\n  if (!opts.everything) list = list.filter(item => typeof item === 'string');\n  list = list.map(item => {\n    if (opts.everything && typeof item === 'string') return item;else if (typeof item !== 'string') item = item[0];\n    const pinyin = toPinyinSyllable(item);\n    if (opts.numbered) return opts.everything ? [pinyin] : pinyin;else if (opts.everything) return [numberToMark(pinyin)];else return numberToMark(pinyin);\n  });\n  return list;\n};\nexport default fromPinyin;","map":{"version":3,"names":["removeTone","getToneNumber","numberToMark","pinyinSplit","py2zy","toneMarks","fromPinyinSyllable","pinyin","zy","toLowerCase","fromPinyin","input","everything","translate","map","item","splitZhuyin","zhuyin","list","index","length","count","wordFound","word","substr","Object","values","includes","push","toPinyinSyllable","tone","indexOf","pinyinIndex","keys","toPinyin","opts","filter","numbered"],"sources":["/Users/tsaiyunzhen/my-react-app/my-app/node_modules/zhuyin/lib/esm/index.js"],"sourcesContent":["import { removeTone, getToneNumber, numberToMark } from 'pinyin-utils';\nimport pinyinSplit from 'pinyin-split';\nimport py2zy from './py2zy';\nexport const toneMarks = [\"\", \"ˊ\", \"ˇ\", \"`\", \"˙\"];\nexport const fromPinyinSyllable = (pinyin) => {\n    let zy = py2zy[removeTone(pinyin).toLowerCase()];\n    return zy + toneMarks[getToneNumber(pinyin) - 1];\n};\nexport const fromPinyin = (input, everything = false) => {\n    const translate = (pinyin) => {\n        return pinyinSplit(pinyin, everything).map(item => {\n            if (everything) {\n                if (typeof item === 'string')\n                    return item;\n                else {\n                    return fromPinyinSyllable(item[0]);\n                }\n            }\n            else {\n                return fromPinyinSyllable(item);\n            }\n        });\n    };\n    if (typeof input === 'string')\n        return translate(input);\n    else\n        return input.map(translate);\n};\nexport const splitZhuyin = (zhuyin, everything = false) => {\n    const list = [];\n    let index = 0;\n    while (index < zhuyin.length) {\n        let count = zhuyin.length - index;\n        let wordFound = false;\n        while (count > 1) {\n            let word = zhuyin.substr(index, count);\n            if (Object.values(py2zy).includes(word)) { // word found\n                wordFound = true;\n                if (toneMarks.includes(zhuyin[index + count])) { // tone found after word\n                    word += zhuyin[index + count];\n                    count++;\n                }\n                list.push(everything ? [word] : word);\n                index += count - 1;\n                break;\n            }\n            count--;\n        }\n        if (!wordFound && everything) {\n            if (index === 0 || typeof list[list.length - 1] === 'object') {\n                list.push(zhuyin[index]);\n            }\n            else if (typeof list[list.length - 1] === 'string') {\n                list[list.length - 1] += zhuyin[index];\n            }\n        }\n        index++;\n    }\n    return list;\n};\nexport const toPinyinSyllable = (zhuyin) => {\n    let tone = toneMarks.indexOf(zhuyin[zhuyin.length - 1]) + 1;\n    if (tone > 0) {\n        zhuyin = zhuyin.substr(0, zhuyin.length - 1);\n    }\n    else {\n        tone = 1;\n    }\n    let pinyinIndex = Object.values(py2zy).indexOf(zhuyin);\n    if (pinyinIndex > -1) {\n        return Object.keys(py2zy)[pinyinIndex] + tone;\n    }\n    else {\n        return zhuyin;\n    }\n};\nexport const toPinyin = (zhuyin, opts = {}) => {\n    let list = splitZhuyin(zhuyin, opts.everything);\n    if (!opts.everything)\n        list = list.filter(item => typeof item === 'string');\n    list = list.map(item => {\n        if (opts.everything && typeof item === 'string')\n            return item;\n        else if (typeof item !== 'string')\n            item = item[0];\n        const pinyin = toPinyinSyllable(item);\n        if (opts.numbered)\n            return (opts.everything ? [pinyin] : pinyin);\n        else if (opts.everything)\n            return [numberToMark(pinyin)];\n        else\n            return numberToMark(pinyin);\n    });\n    return list;\n};\nexport default fromPinyin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}